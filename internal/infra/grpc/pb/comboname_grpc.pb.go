// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: catalog/internal/infra/grpc/protofiles/comboname.proto

package comboname

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ComboNameService_GetByID_FullMethodName = "/comboname.ComboNameService/GetByID"
	ComboNameService_GetAll_FullMethodName  = "/comboname.ComboNameService/GetAll"
	ComboNameService_Create_FullMethodName  = "/comboname.ComboNameService/Create"
	ComboNameService_Update_FullMethodName  = "/comboname.ComboNameService/Update"
	ComboNameService_Disable_FullMethodName = "/comboname.ComboNameService/Disable"
)

// ComboNameServiceClient is the client API for ComboNameService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Serviço para operações com ComboName
type ComboNameServiceClient interface {
	GetByID(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*ComboNameResponse, error)
	GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error)
	Create(ctx context.Context, in *CreateComboNameRequest, opts ...grpc.CallOption) (*ComboNameResponse, error)
	Update(ctx context.Context, in *UpdateComboNameRequest, opts ...grpc.CallOption) (*ComboNameResponse, error)
	Disable(ctx context.Context, in *DisableComboNameRequest, opts ...grpc.CallOption) (*DisableResponse, error)
}

type comboNameServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewComboNameServiceClient(cc grpc.ClientConnInterface) ComboNameServiceClient {
	return &comboNameServiceClient{cc}
}

func (c *comboNameServiceClient) GetByID(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*ComboNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ComboNameResponse)
	err := c.cc.Invoke(ctx, ComboNameService_GetByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *comboNameServiceClient) GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllResponse)
	err := c.cc.Invoke(ctx, ComboNameService_GetAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *comboNameServiceClient) Create(ctx context.Context, in *CreateComboNameRequest, opts ...grpc.CallOption) (*ComboNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ComboNameResponse)
	err := c.cc.Invoke(ctx, ComboNameService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *comboNameServiceClient) Update(ctx context.Context, in *UpdateComboNameRequest, opts ...grpc.CallOption) (*ComboNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ComboNameResponse)
	err := c.cc.Invoke(ctx, ComboNameService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *comboNameServiceClient) Disable(ctx context.Context, in *DisableComboNameRequest, opts ...grpc.CallOption) (*DisableResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisableResponse)
	err := c.cc.Invoke(ctx, ComboNameService_Disable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComboNameServiceServer is the server API for ComboNameService service.
// All implementations must embed UnimplementedComboNameServiceServer
// for forward compatibility.
//
// Serviço para operações com ComboName
type ComboNameServiceServer interface {
	GetByID(context.Context, *GetByIDRequest) (*ComboNameResponse, error)
	GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error)
	Create(context.Context, *CreateComboNameRequest) (*ComboNameResponse, error)
	Update(context.Context, *UpdateComboNameRequest) (*ComboNameResponse, error)
	Disable(context.Context, *DisableComboNameRequest) (*DisableResponse, error)
	mustEmbedUnimplementedComboNameServiceServer()
}

// UnimplementedComboNameServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedComboNameServiceServer struct{}

func (UnimplementedComboNameServiceServer) GetByID(context.Context, *GetByIDRequest) (*ComboNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedComboNameServiceServer) GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedComboNameServiceServer) Create(context.Context, *CreateComboNameRequest) (*ComboNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedComboNameServiceServer) Update(context.Context, *UpdateComboNameRequest) (*ComboNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedComboNameServiceServer) Disable(context.Context, *DisableComboNameRequest) (*DisableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disable not implemented")
}
func (UnimplementedComboNameServiceServer) mustEmbedUnimplementedComboNameServiceServer() {}
func (UnimplementedComboNameServiceServer) testEmbeddedByValue()                          {}

// UnsafeComboNameServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComboNameServiceServer will
// result in compilation errors.
type UnsafeComboNameServiceServer interface {
	mustEmbedUnimplementedComboNameServiceServer()
}

func RegisterComboNameServiceServer(s grpc.ServiceRegistrar, srv ComboNameServiceServer) {
	// If the following call pancis, it indicates UnimplementedComboNameServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ComboNameService_ServiceDesc, srv)
}

func _ComboNameService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComboNameServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComboNameService_GetByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComboNameServiceServer).GetByID(ctx, req.(*GetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComboNameService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComboNameServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComboNameService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComboNameServiceServer).GetAll(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComboNameService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateComboNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComboNameServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComboNameService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComboNameServiceServer).Create(ctx, req.(*CreateComboNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComboNameService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateComboNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComboNameServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComboNameService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComboNameServiceServer).Update(ctx, req.(*UpdateComboNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComboNameService_Disable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableComboNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComboNameServiceServer).Disable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComboNameService_Disable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComboNameServiceServer).Disable(ctx, req.(*DisableComboNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ComboNameService_ServiceDesc is the grpc.ServiceDesc for ComboNameService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ComboNameService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "comboname.ComboNameService",
	HandlerType: (*ComboNameServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetByID",
			Handler:    _ComboNameService_GetByID_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _ComboNameService_GetAll_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ComboNameService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ComboNameService_Update_Handler,
		},
		{
			MethodName: "Disable",
			Handler:    _ComboNameService_Disable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "catalog/internal/infra/grpc/protofiles/comboname.proto",
}
